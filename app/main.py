from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.exceptions import HTTPException
from app.db.database import create_tables
from app.routers import auth_simple, checklist, reports
from app.config import settings

# Crear la aplicaci√≥n
app = FastAPI(
    title=settings.app_name,
    description="Sistema de verificaci√≥n de buenas pr√°cticas en la administraci√≥n de medicamentos",
    version="1.0.3"  # Fix para producci√≥n
)

# Exception handler para redirigir a login en caso de 401
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Si es un error 401 y la petici√≥n espera HTML, redirigir a login
    if exc.status_code == 401:
        accept_header = request.headers.get("accept", "")
        if "text/html" in accept_header:
            return RedirectResponse(url="/login?next=" + str(request.url.path), status_code=302)
    # Para otros casos, retornar el error JSON normal
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail}
    )

# Configuraci√≥n de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuraci√≥n de templates
templates = Jinja2Templates(directory="templates")

# Archivos est√°ticos
app.mount("/static", StaticFiles(directory="static"), name="static")

# Incluir routers
app.include_router(auth_simple.router)
app.include_router(checklist.router, prefix="/checklist", tags=["checklist"])
app.include_router(reports.router, prefix="/reports", tags=["reports"])

# Ruta principal
@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    return templates.TemplateResponse(
        "index.html",
        {"request": request}
    )

# P√°gina de login
@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse(
        "login.html",
        {"request": request}
    )

# Inicializaci√≥n de la base de datos
@app.on_event("startup")
async def startup_event():
    create_tables()
    print(f"‚úÖ {settings.app_name} iniciado correctamente")
    print(f"üìä Base de datos: {settings.database_url}")
    print(f"üåç Entorno: {settings.environment}")

@app.get("/health")
async def health_check():
    return {"status": "healthy", "app": settings.app_name}

# Endpoint temporal para crear usuario admin (elimina el existente si hay problemas)
@app.get("/setup-admin")
async def setup_admin(force: bool = False):
    from app.db.database import SessionLocal
    from app.models.user import User
    from app.auth.users import get_password_hash
    
    db = SessionLocal()
    
    try:
        # Verificar si ya existe un admin
        existing_admin = db.query(User).filter(User.username == "admin").first()
        
        if existing_admin and not force:
            return {
                "status": "already_exists",
                "message": "El usuario admin ya existe. Usa ?force=true para recrearlo",
                "username": existing_admin.username,
                "email": existing_admin.email,
                "hint": "Si tienes problemas de login, visita: /setup-admin?force=true"
            }
        
        # Si force=true, eliminar el admin existente
        if existing_admin:
            db.delete(existing_admin)
            db.commit()
        
        # Crear nuevo usuario admin con el fix de bcrypt
        hashed_password = get_password_hash("Admin123!")
        admin = User(
            username="admin",
            email="admin@medcheck.com",
            hashed_password=hashed_password,
            full_name="Administrador del Sistema",
            is_active=True,
            is_admin=True
        )
        
        db.add(admin)
        db.commit()
        db.refresh(admin)
        
        return {
            "status": "success",
            "message": "Usuario administrador creado exitosamente con el fix de bcrypt",
            "username": "admin",
            "password": "Admin123!",
            "email": admin.email,
            "login_url": "/login",
            "recreated": existing_admin is not None
        }
        
    except Exception as e:
        db.rollback()
        return {
            "status": "error",
            "message": str(e)
        }
    finally:
        db.close()

# Ruta de diagn√≥stico para listar endpoints disponibles
@app.get("/debug/routes")
async def debug_routes():
    try:
        return [
            {"path": r.path, "name": getattr(r, "name", None)}
            for r in app.routes
        ]
    except Exception as e:
        return {"error": str(e)}
